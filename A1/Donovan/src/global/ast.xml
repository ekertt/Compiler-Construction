<!--
 This XML file is the "command center" of your compiler.
 Here, we define the structure of the abstract syntax tree as well as the 
 traversals to process it.
-->

<?xml-stylesheet href="ast.html.xsl" type="text/xsl" name="HTML" media="screen"?>
<definition version="0.9">

  <!--
  =========================================================================
-->

  <attributetypes>
    <type name="String" ctype="char*" init="NULL" copy="function" />
    <type name="Int" ctype="int" init="0" copy="literal" />
    <type name="Bool" ctype="bool" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" init="0.0" copy="literal" />
    <type name="BinOp" ctype="binop" init="BO_unknown" copy="literal" />
    <type name="Link" ctype="node*" init="NULL" copy="lookup" />
    <type name="CompilerPhase" ctype="compiler_phase_t" init="PH_initial" copy="literal" />
  </attributetypes>

  <!--
  =========================================================================
-->

  <phases>
    <!-- id is the short id of the traversal 
         name is a descriptive name
         default gives the default traversal mode
           user  a user defined function
           sons  TravSons
           none  TravNone
           error TravError
         include the include file needed for the traversal
    -->
    <general>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" />
      <traversal id="COPY" name="Copy Syntax Tree" default="user" include="copy_node.h" />
      <traversal id="FREE" name="Free Syntax Tree" default="user" include="free_node.h" />
      <traversal id="CHK" name="Check Syntax Tree" default="user" include="check.h" />

      <traversal id="RI" name="Rename identifiers" default="sons" include="rename_identifiers.h">
        <travuser>
          <node name="Var" />
          <node name="VarLet" />
        </travuser>
      </traversal>

      <traversal id="FL" name="Fool compilers" default="sons" include="fool.h">
        <travuser>
          <node name="BinOp" />
        </travuser>
      </traversal>

      <traversal id="SR" name="Strength reduction" default="sons" include="strength_reduction.h">
        <travuser>
          <node name="BinOp" />
        </travuser>
      </traversal>

      <traversal id="CO" name="Count operators" default="sons" include="count_operators.h">
        <travuser>
          <node name="BinOp" />
          <node name="Module" />
        </travuser>
      </traversal>

      <traversal id="CI" name="Count identifiers" default="sons" include="count_identifiers.h">
        <travuser>
          <node name="Var" />
          <node name="VarLet" />
        </travuser>
      </traversal>
      
      <traversal id="SI" name="Sum ins" default="sons" include="sum_ints.h">
        <travuser>
          <node name="Num" />
        </travuser>
      </traversal>

      <traversal id="OS" name="Optimise subtraction" default="sons" include="opt_sub.h">
        <travuser>
          <node name="BinOp" />
        </travuser>
      </traversal>

    </general>
  </phases>

  <!--
  =========================================================================
-->

  <nodesets>
    <nodeset name="Expr">
      <target>
        <node name="BinOp" />
        <node name="Var" />
        <node name="Num" />
        <node name="Float" />
        <node name="Bool" />
      </target>
    </nodeset>
    <nodeset name="Stmt">
      <target>
        <node name="Assign" />
      </target>
    </nodeset>
  </nodesets>

  <!--
  =========================================================================
-->

  <syntaxtree>
    <!--
 Node Module:
-->
    <node name="Module">
      <description>Represents binary operator application</description>
      <sons>
        <son name="Next">
          <description>Next statement in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Stmts" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
        <attributes>
          <attribute name="Add">
            <description>Counter for + operator</description>
            <type name="Int">
              <targets>
                <target mandatory="yes">
                  <any />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </type>
          </attribute>
          <attribute name="Sub">
            <description>Counter for - operator</description>
            <type name="Int">
              <targets>
                <target mandatory="yes">
                  <any />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </type>
          </attribute>
          <attribute name="Div">
            <description>Counter for / operator</description>
            <type name="Int">
              <targets>
                <target mandatory="yes">
                  <any />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </type>
          </attribute>
          <attribute name="Mul">
            <description>Counter for * operator</description>
            <type name="Int">
              <targets>
                <target mandatory="yes">
                  <any />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </type>
          </attribute>
          <attribute name="Mod">
            <description>Counter for % operator</description>
            <type name="Int">
              <targets>
                <target mandatory="yes">
                  <any />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </type>
          </attribute>
        </attributes>
    </node>
    <!--
 Node Stmts:
-->
    <node name="Stmts">
      <description>Represents (sequence of) statements</description>
      <sons>
        <son name="Stmt">
          <description>First statement in sequence</description>
          <targets>
            <target mandatory="yes">
              <set name="Stmt" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <description>Remaining statements in sequence</description>
          <targets>
            <target mandatory="no">
              <node name="Stmts" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
    <!--
 Node Assign:
-->
    <node name="Assign">
      <description>Represents assignment statement</description>
      <sons>
        <son name="Let">
          <description>
         Left hand side variable; can be missing to represent procedure calls
          </description>
          <targets>
            <target mandatory="no">
              <node name="VarLet" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Expr">
          <description>Right hand side expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
    <!--
 Node BinOp:
-->
    <node name="BinOp">
      <description>Represents binary operator application</description>
      <sons>
        <son name="Left">
          <description>Left operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Right">
          <description>Right operand expression</description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <description>Operator type</description>
        <attribute name="Op">
          <type name="BinOp">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    <!--
 Node VarLet:
-->
    <node name="VarLet">
      <description>Represents variable (identifier) in assignment position</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
          <description>Identifier in character string representation</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Decl">
          <description>Link to symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SymbolTableEntry" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    <!--
 Node Var:
-->
    <node name="Var">
      <description>Represents variable (identifier) in expression position</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Name">
          <description>Identifier in character string representation</description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Decl">
          <description>Link to symbol table entry</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SymbolTableEntry" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    <!--
 Node Num:
-->
    <node name="Num">
      <description>Represents integer constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Int">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    <!--
 Node Float:
-->
    <node name="Float">
      <description>Represents floating point constant</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Float">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    <!--
 Node Bool:
-->
    <node name="Bool">
      <description>Represents Boolean constant (true/false)</description>
      <sons>
      </sons>
      <attributes>
        <attribute name="Value">
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
    <!--
 Node SymbolTableEntry:
-->
    <node name="SymbolTableEntry">
      <description>Represents symbol table entry</description>
      <sons>
      </sons>
      <attributes>
      </attributes>
    </node>
    <!--
 Node Error:
-->
    <node name="Error">
      <description>Represents internal Error representation constructor</description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Error" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="message">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="anyphase">
          <type name="CompilerPhase">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>

  </syntaxtree>

</definition>
  

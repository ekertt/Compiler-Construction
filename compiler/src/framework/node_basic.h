
/**
 * @file node_basic.h
 *
 * Functions to allocate node structures
 *
 * THIS FILE HAS BEEN GENERATED USING
 * $Id: node_basic.h.xsl 14593 2006-01-31 17:09:55Z cg $.
 * DO NOT EDIT THIS FILE AS MIGHT BE CHANGED IN A LATER VERSION.
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
 */

#ifndef _SAC_NODE_BASIC_H_
#define _SAC_NODE_BASIC_H_

#include "types.h"


#define _SAC_AST_VERSION_ "0.9"


/*****************************************************************************
 * macros and functions for N_program
 *****************************************************************************/

#define PROGRAM_DECLARATIONS( n) ((n)->sons.N_program->Declarations)
extern node    *TBmakeProgram(node * Declarations);

/*****************************************************************************
 * macros and functions for N_declarations
 *****************************************************************************/

#define DECLARATIONS_DECLARATION( n) ((n)->sons.N_declarations->Declaration)
#define DECLARATIONS_NEXT( n) ((n)->sons.N_declarations->Next)
extern node    *TBmakeDeclarations(node * Declaration, node * Next);

/*****************************************************************************
 * macros and functions for N_fundec
 *****************************************************************************/

#define FUNDEC_FUNHEADER( n) ((n)->sons.N_fundec->FunHeader)
#define FUNDEC_TYPE( n) ((n)->attribs.N_fundec->Type)
extern node    *TBmakeFundec(type Type, node * FunHeader);

/*****************************************************************************
 * macros and functions for N_fundefs
 *****************************************************************************/

#define FUNDEFS_FUNDEF( n) ((n)->sons.N_fundefs->FunDef)
#define FUNDEFS_NEXT( n) ((n)->sons.N_fundefs->Next)
extern node    *TBmakeFundefs(node * FunDef, node * Next);

/*****************************************************************************
 * macros and functions for N_fundef
 *****************************************************************************/

#define FUNDEF_FUNBODY( n) ((n)->sons.N_fundef->FunBody)
#define FUNDEF_PARAMS( n) ((n)->sons.N_fundef->Params)
#define FUNDEF_TYPE( n) ((n)->attribs.N_fundef->Type)
#define FUNDEF_FLAGSTRUCTURE( n) ((n)->attribs.N_fundef->flags)
#define FUNDEF_ISEXTERN( n) ((n)->attribs.N_fundef->flags.IsExtern)
#define FUNDEF_ISEXPORT( n) ((n)->attribs.N_fundef->flags.IsExport)
extern node    *TBmakeFundef(type Type, node * FunBody, node * Params);

/*****************************************************************************
 * macros and functions for N_funheader
 *****************************************************************************/

#define FUNHEADER_PARAM( n) ((n)->sons.N_funheader->Param)
#define FUNHEADER_TYPE( n) ((n)->attribs.N_funheader->Type)
extern node    *TBmakeFunheader(type Type, node * Param);

/*****************************************************************************
 * macros and functions for N_globaldec
 *****************************************************************************/

#define GLOBALDEC_IDS( n) ((n)->sons.N_globaldec->Ids)
#define GLOBALDEC_TYPE( n) ((n)->attribs.N_globaldec->Type)
extern node    *TBmakeGlobaldec(type Type, node * Ids);

/*****************************************************************************
 * macros and functions for N_globaldef
 *****************************************************************************/

#define GLOBALDEF_IDS( n) ((n)->sons.N_globaldef->Ids)
#define GLOBALDEF_TYPE( n) ((n)->attribs.N_globaldef->Type)
#define GLOBALDEF_FLAGSTRUCTURE( n) ((n)->attribs.N_globaldef->flags)
#define GLOBALDEF_ISEXPORT( n) ((n)->attribs.N_globaldef->flags.isExport)
extern node    *TBmakeGlobaldef(type Type, node * Ids);

/*****************************************************************************
 * macros and functions for N_param
 *****************************************************************************/

#define PARAM_ID( n) ((n)->sons.N_param->Id)
#define PARAM_NEXT( n) ((n)->sons.N_param->Next)
#define PARAM_TYPE( n) ((n)->attribs.N_param->Type)
extern node    *TBmakeParam(type Type, node * Id, node * Next);

/*****************************************************************************
 * macros and functions for N_funbody
 *****************************************************************************/

#define FUNBODY_VARDEC( n) ((n)->sons.N_funbody->Vardec)
#define FUNBODY_LOCALFUNDEFS( n) ((n)->sons.N_funbody->LocalFundefs)
#define FUNBODY_STMTS( n) ((n)->sons.N_funbody->Stmts)
extern node    *TBmakeFunbody(node * Vardec, node * LocalFundefs, node * Stmts);

/*****************************************************************************
 * macros and functions for N_vardec
 *****************************************************************************/

#define VARDEC_EXPRESSIONS( n) ((n)->sons.N_vardec->Expressions)
#define VARDEC_NEXT( n) ((n)->sons.N_vardec->Next)
#define VARDEC_TYPE( n) ((n)->attribs.N_vardec->Type)
extern node    *TBmakeVardec(type Type, node * Expressions, node * Next);

/*****************************************************************************
 * macros and functions for N_ifelse
 *****************************************************************************/

#define IFELSE_CONDITION( n) ((n)->sons.N_ifelse->Condition)
#define IFELSE_THEN( n) ((n)->sons.N_ifelse->Then)
#define IFELSE_ELSE( n) ((n)->sons.N_ifelse->Else)
extern node    *TBmakeIfelse(node * Condition, node * Then, node * Else);

/*****************************************************************************
 * macros and functions for N_while
 *****************************************************************************/

#define WHILE_CONDITION( n) ((n)->sons.N_while->Condition)
#define WHILE_BLOCK( n) ((n)->sons.N_while->Block)
extern node    *TBmakeWhile(node * Condition, node * Block);

/*****************************************************************************
 * macros and functions for N_dowhile
 *****************************************************************************/

#define DOWHILE_CONDITION( n) ((n)->sons.N_dowhile->Condition)
#define DOWHILE_BLOCK( n) ((n)->sons.N_dowhile->Block)
extern node    *TBmakeDowhile(node * Condition, node * Block);

/*****************************************************************************
 * macros and functions for N_for
 *****************************************************************************/

#define FOR_FIRST( n) ((n)->sons.N_for->First)
#define FOR_SECOND( n) ((n)->sons.N_for->Second)
#define FOR_THIRD( n) ((n)->sons.N_for->Third)
#define FOR_BLOCK( n) ((n)->sons.N_for->Block)
extern node    *TBmakeFor(node * First, node * Second, node * Third, node * Block);

/*****************************************************************************
 * macros and functions for N_return
 *****************************************************************************/

#define RETURN_EXPR( n) ((n)->sons.N_return->Expr)
extern node    *TBmakeReturn(node * Expr);

/*****************************************************************************
 * macros and functions for N_expressions
 *****************************************************************************/

#define EXPRESSIONS_EXPR( n) ((n)->sons.N_expressions->Expr)
#define EXPRESSIONS_NEXT( n) ((n)->sons.N_expressions->Next)
extern node    *TBmakeExpressions(node * Expr, node * Next);

/*****************************************************************************
 * macros and functions for N_ids
 *****************************************************************************/

#define IDS_EXPR( n) ((n)->sons.N_ids->Expr)
extern node    *TBmakeIds(node * Expr);

/*****************************************************************************
 * macros and functions for N_stmts
 *****************************************************************************/

#define STMTS_STMT( n) ((n)->sons.N_stmts->Stmt)
#define STMTS_NEXT( n) ((n)->sons.N_stmts->Next)
extern node    *TBmakeStmts(node * Stmt, node * Next);

/*****************************************************************************
 * macros and functions for N_assign
 *****************************************************************************/

#define ASSIGN_LET( n) ((n)->sons.N_assign->Let)
#define ASSIGN_EXPR( n) ((n)->sons.N_assign->Expr)
extern node    *TBmakeAssign(node * Let, node * Expr);

/*****************************************************************************
 * macros and functions for N_binop
 *****************************************************************************/

#define BINOP_LEFT( n) ((n)->sons.N_binop->Left)
#define BINOP_RIGHT( n) ((n)->sons.N_binop->Right)
#define BINOP_OP( n) ((n)->attribs.N_binop->Op)
extern node    *TBmakeBinop(binop Op, node * Left, node * Right);

/*****************************************************************************
 * macros and functions for N_monop
 *****************************************************************************/

#define MONOP_OPERAND( n) ((n)->sons.N_monop->Operand)
#define MONOP_OP( n) ((n)->attribs.N_monop->Op)
extern node    *TBmakeMonop(monop Op, node * Operand);

/*****************************************************************************
 * macros and functions for N_varlet
 *****************************************************************************/

#define VARLET_NAME( n) ((n)->attribs.N_varlet->Name)
#define VARLET_DECL( n) ((n)->attribs.N_varlet->Decl)
extern node    *TBmakeVarlet(char *Name);

/*****************************************************************************
 * macros and functions for N_var
 *****************************************************************************/

#define VAR_NAME( n) ((n)->attribs.N_var->Name)
#define VAR_DECL( n) ((n)->attribs.N_var->Decl)
extern node    *TBmakeVar(char *Name);

/*****************************************************************************
 * macros and functions for N_num
 *****************************************************************************/

#define NUM_VALUE( n) ((n)->attribs.N_num->Value)
extern node    *TBmakeNum(int Value);

/*****************************************************************************
 * macros and functions for N_float
 *****************************************************************************/

#define FLOAT_VALUE( n) ((n)->attribs.N_float->Value)
extern node    *TBmakeFloat(float Value);

/*****************************************************************************
 * macros and functions for N_bool
 *****************************************************************************/

#define BOOL_VALUE( n) ((n)->attribs.N_bool->Value)
extern node    *TBmakeBool(bool Value);

/*****************************************************************************
 * macros and functions for N_symboltableentry
 *****************************************************************************/

extern node    *TBmakeSymboltableentry();

/*****************************************************************************
 * macros and functions for N_error
 *****************************************************************************/

#define ERROR_NEXT( n) ((n)->sons.N_error->Next)
#define ERROR_MESSAGE( n) ((n)->attribs.N_error->message)
#define ERROR_ANYPHASE( n) ((n)->attribs.N_error->anyphase)
extern node    *TBmakeError(char *message, compiler_phase_t anyphase, node * Next);

#endif				/* _SAC_NODE_BASIC_H_ */
